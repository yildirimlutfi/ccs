/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/Assert.h>
#include <xdc/runtime/Error.h>
#include <xdc/runtime/System.h>
/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/sysbios/knl/Clock.h>
/* TI-RTOS Header files */
#include <ti/drivers/PIN.h>
#include <ti/drivers/power/PowerCC26XX.h>
/* Board Header files */
#include "Board.h"
/* EasyLink API Header files */
#include "easylink/EasyLink.h"
/* Application header files */
#include "smartrf_settings/smartrf_settings.h"
/* Runtime Library Header Files */
#include <stdlib.h>
#include <string.h>
/* Driverlib Header files */
#include <ti/devices/DeviceFamily.h>
#include DeviceFamily_constructPath(driverlib/trng.h)
/*Timer Header Files */
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/hal/Seconds.h>

 /* Application LED pin configuration table:
 *   - All LEDs board LEDs are off.  */
PIN_Config pinTable[] = {
    Board_PIN_LED1 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    Board_PIN_LED2 | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    PIN_TERMINATE };
PIN_Handle ledPinHandle;

/*Defination for taskTimer */
Clock_Params clockParamsTimer;
Clock_Handle handleTaskTimer;
Error_Block ebTaskTimer;

/*Defination for semaphore*/
Semaphore_Struct structSemaphore;
Semaphore_Handle handleSemaphore;
Task_Struct taskStructSsemaphore1,taskStructSsemaphore2;
static Task_Params taskParamsSemaphore1,taskParamsSemaphore2;


void fonksiyonSemaphore1done(UArg uarg1, UArg uarg2)
{
    Task_sleep(10000);
    Semaphore_post(handleSemaphore);
    Task_sleep(10000);
}

void fonksiyonSemaphore2done(UArg uarg1, UArg uarg2)
{
    Task_sleep(10000);
    Semaphore_post(handleSemaphore);
    Task_sleep(10000);
}

void fonksiyonSemaphore1(UArg uarg1, UArg uarg2)
{
    /* Create a semaphore for Async*/
    Semaphore_Params paramsSemaphore;
    Error_Block errorBlockSemaphore;
    /* Init params */
    Semaphore_Params_init(&paramsSemaphore);
    Error_init(&errorBlockSemaphore);
    /* Create semaphore instance */
    handleSemaphore = Semaphore_create(0, &paramsSemaphore, &errorBlockSemaphore);
    if(handleSemaphore == NULL)
    {
        System_abort("Semaphore creation failed");
    }

    while(1)
    {
        PIN_setOutputValue(ledPinHandle, Board_PIN_LED1,!PIN_getOutputValue(Board_PIN_LED1));
        Semaphore_pend(handleSemaphore, 100000);
    }
}

void fonksiyonSemaphore2(UArg uarg1, UArg uarg2)
{
    /* Create a semaphore for Async*/
    Semaphore_Params paramsSemaphore;
    Error_Block errorBlockSemaphore;
    /* Init params */
    Semaphore_Params_init(&paramsSemaphore);
    Error_init(&errorBlockSemaphore);
    /* Create semaphore instance */
    handleSemaphore = Semaphore_create(0, &paramsSemaphore, &errorBlockSemaphore);
    if(handleSemaphore == NULL)
    {
        System_abort("Semaphore creation failed");
    }

    while(1)
    {
        Task_sleep(10000);
        PIN_setOutputValue(ledPinHandle, Board_PIN_LED2,!PIN_getOutputValue(Board_PIN_LED2));
        Semaphore_pend(handleSemaphore, 100000);
    }
}

void taskTimer(UArg arg1)//tick=1s
{
    //Task_yield();//taskYIELD() is used to request a context switch to another task.taskThread1 ile taskThread2 arasi gecis icin kullanildi
}

void taskInit()
{
    Error_init(&ebTaskTimer);//timer fonksiyonu olusturuldu
    Clock_Params_init(&clockParamsTimer);
    clockParamsTimer.period = 100000;//1us*100000=1 saniye
    clockParamsTimer.startFlag = TRUE;
    handleTaskTimer=Clock_create(taskTimer, 100, &clockParamsTimer, &ebTaskTimer);
    if(handleTaskTimer==NULL)
    {
     System_abort("taskTimer create failed");
    }

    Task_Params_init(&taskParamsSemaphore1);
    taskParamsSemaphore1.stackSize=512;
    taskParamsSemaphore1.priority=1;
    Task_construct(&taskStructSsemaphore1,fonksiyonSemaphore1,&taskParamsSemaphore1,NULL);

    Task_Params_init(&taskParamsSemaphore2);
    taskParamsSemaphore2.stackSize=512;
    taskParamsSemaphore2.priority=3;
    Task_construct(&taskStructSsemaphore2,fonksiyonSemaphore2,&taskParamsSemaphore2,NULL);
}

void main()
{
    taskInit();
    Board_initGeneral();
    BIOS_start();
}
